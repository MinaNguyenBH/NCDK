/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
namespace NCDK.Smiles.SMARTS.Parser
{
    [System.Obsolete]
    internal class SimpleNode : INode
    {
        private INode parent;
        private INode[] children;
        private readonly int id;
        private object value;
        private readonly SMARTSParser parser;

        public SimpleNode(int i)
        {
            id = i;
        }

        public SimpleNode(SMARTSParser p, int i)
            : this(i)
        {
            parser = p;
        }

        public void JjtOpen()
        {
        }

        public void JjtClose()
        {
        }

        public void JjtSetParent(INode n) { parent = n; }
        public INode JjtGetParent() { return parent; }

        public void JjtAddChild(INode n, int i)
        {
            if (children == null)
            {
                children = new INode[i + 1];
            }
            else if (i >= children.Length)
            {
                INode[] c = new INode[i + 1];
                System.Array.Copy(children, 0, c, 0, children.Length);
                children = c;
            }
            children[i] = n;
        }

        public void JjtRemoveChild(int i)
        {
            if (i >= children.Length) return;
            INode[] c = new INode[children.Length - 1];
            System.Array.Copy(children, 0, c, 0, i);
            if (i < c.Length)
            {
                System.Array.Copy(children, i + 1, c, i, c.Length - i);
            }
            children = c;
        }

        public INode JjtGetChild(int i)
        {
            return children[i];
        }

        public int JjtGetNumChildren()
        {
            return (children == null) ? 0 : children.Length;
        }

        public void JJTSetValue(object value) { this.value = value; }
        public object JJTGetValue() { return value; }

        /// <summary>Accept the visitor. </summary>
        public virtual object JjtAccept(ISMARTSParserVisitor visitor, object data)
        {
            return visitor.Visit(this, data);
        }

        /// <summary>Accept the visitor. </summary>
        public virtual object ChildrenAccept(ISMARTSParserVisitor visitor, object data)
        {
            if (children != null)
            {
                for (int i = 0; i < children.Length; ++i)
                {
                    children[i].JjtAccept(visitor, data);
                }
            }
            return data;
        }

        /* You can override these two methods in subclasses of SimpleNode to
           customize the way the node appears when the tree is dumped.  If
           your output uses more than one line you should override
           ToString(string), otherwise overriding ToString() is probably all
           you need to do. */

        public override string ToString() { return SMARTSParserTreeConstants.jjtNodeName[id]; }
        public virtual string ToString(string prefix) { return prefix + ToString(); }

        /* Override this method if you want to customize how the node dumps
           out its children. */

        public void Dump(string prefix)
        {
            System.Console.Out.WriteLine(ToString(prefix));
            if (children != null)
            {
                for (int i = 0; i < children.Length; ++i)
                {
                    SimpleNode n = (SimpleNode)children[i];
                    if (n != null)
                    {
                        n.Dump(prefix + " ");
                    }
                }
            }
        }
    }
}
