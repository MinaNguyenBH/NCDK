/* Generated By:JJTree&JavaCC: Do not edit this line. SMARTSParserTokenManager.java */
/* Copyright (C) 2004-2007  The Chemistry Development Kit (CDK) project
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 * (or see http://www.gnu.org/copyleft/lesser.html)
 */

namespace NCDK.Smiles.SMARTS.Parser
{
    /// <summary>Token Manager.</summary>
    [System.Obsolete]
    internal class SMARTSParserTokenManager
    {
        // Required by SetState
        void Backup(int n) { input_stream.Backup(n); }

        /// <summary>Debug output.</summary>
        public System.IO.Stream debugStream = System.Console.OpenStandardOutput();

        /// <summary>Set debug output.</summary>
        public void SetDebugStream(System.IO.Stream ds) { debugStream = ds; }
        private static int JjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
        {
            switch (pos)
            {
                default:
                    return -1;
            }
        }
        private int JjStartNfa_1(int pos, long active0, long active1, long active2)
        {
            return JjMoveNfa_1(JjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
        }
        private int JjStopAtPos(int pos, int kind)
        {
            jjmatchedKind = kind;
            jjmatchedPos = pos;
            return pos + 1;
        }
        private int JjMoveStringLiteralDfa0_1()
        {
            switch ((int)curChar)
            {
                case 33:
                    return JjStopAtPos(0, 5);
                case 35:
                    return JjStopAtPos(0, 12);
                case 36:
                    return JjStopAtPos(0, 43);
                case 37:
                    return JjStopAtPos(0, 149);
                case 38:
                    return JjStopAtPos(0, 3);
                case 40:
                    return JjStopAtPos(0, 40);
                case 41:
                    return JjStopAtPos(0, 41);
                case 42:
                    return JjStopAtPos(0, 33);
                case 43:
                    jjmatchedKind = 44;
                    return JjMoveStringLiteralDfa1_1(0x0L, 0xfe0000000L);
                case 44:
                    return JjStopAtPos(0, 4);
                case 45:
                    jjmatchedKind = 6;
                    return JjMoveStringLiteralDfa1_1(0x0L, 0x1fc00000L);
                case 46:
                    return JjStopAtPos(0, 148);
                case 47:
                    jjmatchedKind = 7;
                    return JjMoveStringLiteralDfa1_1(0x200L, 0x0L);
                case 58:
                    return JjStopAtPos(0, 13);
                case 59:
                    return JjStopAtPos(0, 2);
                case 61:
                    return JjStopAtPos(0, 11);
                case 62:
                    return JjStopAtPos(0, 147);
                case 63:
                    return JjStopAtPos(0, 37);
                case 64:
                    return JjStopAtPos(0, 15);
                case 65:
                    return JjStopAtPos(0, 35);
                case 66:
                    jjmatchedKind = 23;
                    return JjMoveStringLiteralDfa1_1(0x80000000L, 0x0L);
                case 67:
                    jjmatchedKind = 24;
                    return JjMoveStringLiteralDfa1_1(0x40000000L, 0x0L);
                case 70:
                    return JjStopAtPos(0, 27);
                case 73:
                    return JjStopAtPos(0, 32);
                case 78:
                    return JjStopAtPos(0, 25);
                case 79:
                    return JjStopAtPos(0, 26);
                case 80:
                    return JjStopAtPos(0, 28);
                case 83:
                    return JjStopAtPos(0, 29);
                case 91:
                    return JjStopAtPos(0, 39);
                case 92:
                    jjmatchedKind = 8;
                    return JjMoveStringLiteralDfa1_1(0x400L, 0x0L);
                case 93:
                    return JjStopAtPos(0, 42);
                case 94:
                    return JjStopAtPos(0, 36);
                case 97:
                    jjmatchedKind = 34;
                    return JjMoveStringLiteralDfa1_1(0x200000L, 0x0L);
                case 99:
                    return JjStopAtPos(0, 16);
                case 110:
                    return JjStopAtPos(0, 17);
                case 111:
                    return JjStopAtPos(0, 18);
                case 112:
                    return JjStopAtPos(0, 20);
                case 115:
                    jjmatchedKind = 19;
                    return JjMoveStringLiteralDfa1_1(0x400000L, 0x0L);
                case 126:
                    return JjStopAtPos(0, 14);
                default:
                    return JjMoveNfa_1(0, 0);
            }
        }
        private int JjMoveStringLiteralDfa1_1(long active0, long active2)
        {
            try { curChar = input_stream.ReadChar(); }
            catch (System.IO.IOException)
            {
                JjStopStringLiteralDfa_1(0, active0, 0L, active2);
                return 1;
            }
            switch ((int)curChar)
            {
                case 43:
                    if ((active2 & 0x20000000L) != 0L)
                    {
                        jjmatchedKind = 157;
                        jjmatchedPos = 1;
                    }
                    return JjMoveStringLiteralDfa2_1(active0, 0L, active2, 0xfc0000000L);
                case 45:
                    if ((active2 & 0x400000L) != 0L)
                    {
                        jjmatchedKind = 150;
                        jjmatchedPos = 1;
                    }
                    return JjMoveStringLiteralDfa2_1(active0, 0L, active2, 0x1f800000L);
                case 63:
                    if ((active0 & 0x200L) != 0L)
                        return JjStopAtPos(1, 9);
                    else if ((active0 & 0x400L) != 0L)
                        return JjStopAtPos(1, 10);
                    break;
                case 101:
                    if ((active0 & 0x400000L) != 0L)
                        return JjStopAtPos(1, 22);
                    break;
                case 108:
                    if ((active0 & 0x40000000L) != 0L)
                        return JjStopAtPos(1, 30);
                    break;
                case 114:
                    if ((active0 & 0x80000000L) != 0L)
                        return JjStopAtPos(1, 31);
                    break;
                case 115:
                    if ((active0 & 0x200000L) != 0L)
                        return JjStopAtPos(1, 21);
                    break;
                default:
                    break;
            }
            return JjStartNfa_1(0, active0, 0L, active2);
        }
        private int JjMoveStringLiteralDfa2_1(long old0, long active0, long old2, long active2)
        {
            if (((active0 &= old0) | (active2 &= old2)) == 0L)
                return JjStartNfa_1(0, old0, 0L, old2);
            try { curChar = input_stream.ReadChar(); }
            catch (System.IO.IOException)
            {
                JjStopStringLiteralDfa_1(1, 0L, 0L, active2);
                return 2;
            }
            switch ((int)curChar)
            {
                case 43:
                    if ((active2 & 0x40000000L) != 0L)
                    {
                        jjmatchedKind = 158;
                        jjmatchedPos = 2;
                    }
                    return JjMoveStringLiteralDfa3_1(active2, 0xf80000000L);
                case 45:
                    if ((active2 & 0x800000L) != 0L)
                    {
                        jjmatchedKind = 151;
                        jjmatchedPos = 2;
                    }
                    return JjMoveStringLiteralDfa3_1(active2, 0x1f000000L);
                default:
                    break;
            }
            return JjStartNfa_1(1, 0L, 0L, active2);
        }
        private int JjMoveStringLiteralDfa3_1(long old2, long active2)
        {
            if (((active2 &= old2)) == 0L)
                return JjStartNfa_1(1, 0L, 0L, old2);
            try { curChar = input_stream.ReadChar(); }
            catch (System.IO.IOException)
            {
                JjStopStringLiteralDfa_1(2, 0L, 0L, active2);
                return 3;
            }
            switch ((int)curChar)
            {
                case 43:
                    if ((active2 & 0x80000000L) != 0L)
                    {
                        jjmatchedKind = 159;
                        jjmatchedPos = 3;
                    }
                    return JjMoveStringLiteralDfa4_1(active2, 0xf00000000L);
                case 45:
                    if ((active2 & 0x1000000L) != 0L)
                    {
                        jjmatchedKind = 152;
                        jjmatchedPos = 3;
                    }
                    return JjMoveStringLiteralDfa4_1(active2, 0x1e000000L);
                default:
                    break;
            }
            return JjStartNfa_1(2, 0L, 0L, active2);
        }
        private int JjMoveStringLiteralDfa4_1(long old2, long active2)
        {
            if (((active2 &= old2)) == 0L)
                return JjStartNfa_1(2, 0L, 0L, old2);
            try { curChar = input_stream.ReadChar(); }
            catch (System.IO.IOException)
            {
                JjStopStringLiteralDfa_1(3, 0L, 0L, active2);
                return 4;
            }
            switch ((int)curChar)
            {
                case 43:
                    if ((active2 & 0x100000000L) != 0L)
                    {
                        jjmatchedKind = 160;
                        jjmatchedPos = 4;
                    }
                    return JjMoveStringLiteralDfa5_1(active2, 0xe00000000L);
                case 45:
                    if ((active2 & 0x2000000L) != 0L)
                    {
                        jjmatchedKind = 153;
                        jjmatchedPos = 4;
                    }
                    return JjMoveStringLiteralDfa5_1(active2, 0x1c000000L);
                default:
                    break;
            }
            return JjStartNfa_1(3, 0L, 0L, active2);
        }
        private int JjMoveStringLiteralDfa5_1(long old2, long active2)
        {
            if (((active2 &= old2)) == 0L)
                return JjStartNfa_1(3, 0L, 0L, old2);
            try { curChar = input_stream.ReadChar(); }
            catch (System.IO.IOException)
            {
                JjStopStringLiteralDfa_1(4, 0L, 0L, active2);
                return 5;
            }
            switch ((int)curChar)
            {
                case 43:
                    if ((active2 & 0x200000000L) != 0L)
                    {
                        jjmatchedKind = 161;
                        jjmatchedPos = 5;
                    }
                    return JjMoveStringLiteralDfa6_1(active2, 0xc00000000L);
                case 45:
                    if ((active2 & 0x4000000L) != 0L)
                    {
                        jjmatchedKind = 154;
                        jjmatchedPos = 5;
                    }
                    return JjMoveStringLiteralDfa6_1(active2, 0x18000000L);
                default:
                    break;
            }
            return JjStartNfa_1(4, 0L, 0L, active2);
        }
        private int JjMoveStringLiteralDfa6_1(long old2, long active2)
        {
            if (((active2 &= old2)) == 0L)
                return JjStartNfa_1(4, 0L, 0L, old2);
            try { curChar = input_stream.ReadChar(); }
            catch (System.IO.IOException)
            {
                JjStopStringLiteralDfa_1(5, 0L, 0L, active2);
                return 6;
            }
            switch ((int)curChar)
            {
                case 43:
                    if ((active2 & 0x400000000L) != 0L)
                    {
                        jjmatchedKind = 162;
                        jjmatchedPos = 6;
                    }
                    return JjMoveStringLiteralDfa7_1(active2, 0x800000000L);
                case 45:
                    if ((active2 & 0x8000000L) != 0L)
                    {
                        jjmatchedKind = 155;
                        jjmatchedPos = 6;
                    }
                    return JjMoveStringLiteralDfa7_1(active2, 0x10000000L);
                default:
                    break;
            }
            return JjStartNfa_1(5, 0L, 0L, active2);
        }
        private int JjMoveStringLiteralDfa7_1(long old2, long active2)
        {
            if (((active2 &= old2)) == 0L)
                return JjStartNfa_1(5, 0L, 0L, old2);
            try { curChar = input_stream.ReadChar(); }
            catch (System.IO.IOException)
            {
                JjStopStringLiteralDfa_1(6, 0L, 0L, active2);
                return 7;
            }
            switch ((int)curChar)
            {
                case 43:
                    if ((active2 & 0x800000000L) != 0L)
                        return JjStopAtPos(7, 163);
                    break;
                case 45:
                    if ((active2 & 0x10000000L) != 0L)
                        return JjStopAtPos(7, 156);
                    break;
                default:
                    break;
            }
            return JjStartNfa_1(6, 0L, 0L, active2);
        }
        private int JjMoveNfa_1(int startState, int curPos)
        {
            int startsAt = 0;
            jjnewStateCnt = 2;
            int i = 1;
            jjstateSet[0] = startState;
            int kind = 0x7fffffff;
            for (;;)
            {
                if (++jjround == 0x7fffffff)
                    ReInitRounds();
                if (curChar < 64)
                {
                    long l = 1L << curChar;
                    do
                    {
                        switch (jjstateSet[--i])
                        {
                            case 0:
                                if ((0x3ff000000000000L & l) != 0L)
                                {
                                    if (kind > 38)
                                        kind = 38;
                                }
                                else if ((0x100002600L & l) != 0L)
                                {
                                    if (kind > 1)
                                        kind = 1;
                                }
                                break;
                            case 1:
                                if ((0x3ff000000000000L & l) != 0L)
                                    kind = 38;
                                break;
                            default: break;
                        }
                    } while (i != startsAt);
                }
                else if (curChar < 128)
                {
                    long l = 1L << (curChar & 077);
                    do
                    {
                        switch (jjstateSet[--i])
                        {
                            default: break;
                        }
                    } while (i != startsAt);
                }
                else
                {
                    int i2 = (curChar & 0xff) >> 6;
                    long l2 = 1L << (curChar & 077);
                    do
                    {
                        switch (jjstateSet[--i])
                        {
                            default: break;
                        }
                    } while (i != startsAt);
                }
                if (kind != 0x7fffffff)
                {
                    jjmatchedKind = kind;
                    jjmatchedPos = curPos;
                    kind = 0x7fffffff;
                }
                ++curPos;
                if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
                    return curPos;
                try { curChar = input_stream.ReadChar(); }
                catch (System.IO.IOException) { return curPos; }
            }
        }
        private static int JjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
        {
            switch (pos)
            {
                default:
                    return -1;
            }
        }
        private int JjStartNfa_0(int pos, long active0, long active1, long active2)
        {
            return JjMoveNfa_0(JjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
        }
        private int JjMoveStringLiteralDfa0_0()
        {
            switch ((int)curChar)
            {
                case 33:
                    return JjStopAtPos(0, 5);
                case 35:
                    jjmatchedKind = 12;
                    return JjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L, 0x0L);
                case 36:
                    return JjStopAtPos(0, 43);
                case 38:
                    return JjStopAtPos(0, 3);
                case 40:
                    return JjStopAtPos(0, 40);
                case 41:
                    return JjStopAtPos(0, 41);
                case 42:
                    return JjStopAtPos(0, 33);
                case 43:
                    return JjStopAtPos(0, 44);
                case 44:
                    return JjStopAtPos(0, 4);
                case 45:
                    return JjStopAtPos(0, 6);
                case 47:
                    jjmatchedKind = 7;
                    return JjMoveStringLiteralDfa1_0(0x200L, 0x0L, 0x0L);
                case 58:
                    return JjStopAtPos(0, 13);
                case 59:
                    return JjStopAtPos(0, 2);
                case 61:
                    return JjStopAtPos(0, 11);
                case 63:
                    return JjStopAtPos(0, 37);
                case 64:
                    return JjStopAtPos(0, 15);
                case 65:
                    unchecked
                    {
                        jjmatchedKind = 35;
                        return JjMoveStringLiteralDfa1_0((long)0xa000000000000000L, 0x422080004002000L, 0x0L);
                    }
                case 66:
                    jjmatchedKind = 23;
                    return JjMoveStringLiteralDfa1_0(0x200000080000000L, 0x1000800400000000L, 0x0L);
                case 67:
                    jjmatchedKind = 24;
                    return JjMoveStringLiteralDfa1_0(0x40000000L, 0x2800000208000292L, 0x10L);
                case 68:
                    jjmatchedKind = 46;
                    return JjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800L);
                case 69:
                    return JjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x2100L);
                case 70:
                    unchecked
                    {
                        jjmatchedKind = 27;
                        return JjMoveStringLiteralDfa1_0(0x0L, (long)0x8008000000000040L, 0x0L);
                    }
                case 71:
                    jjmatchedKind = 52;
                    return JjMoveStringLiteralDfa1_0(0x0L, 0x1800L, 0x200L);
                case 72:
                    jjmatchedKind = 54;
                    return JjMoveStringLiteralDfa1_0(0x80000000000000L, 0x101000000000L, 0x1000L);
                case 73:
                    jjmatchedKind = 32;
                    return JjMoveStringLiteralDfa1_0(0x0L, 0x20010000000L, 0x0L);
                case 75:
                    jjmatchedKind = 64;
                    return JjMoveStringLiteralDfa1_0(0x0L, 0x8000L, 0x0L);
                case 76:
                    return JjMoveStringLiteralDfa1_0(0x100000000000000L, 0x800000000L, 0x10004L);
                case 77:
                    return JjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x200020L, 0x1L);
                case 78:
                    jjmatchedKind = 25;
                    return JjMoveStringLiteralDfa1_0(0xc00000000000000L, 0x100100L, 0x2aL);
                case 79:
                    jjmatchedKind = 26;
                    return JjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x0L);
                case 80:
                    jjmatchedKind = 28;
                    return JjMoveStringLiteralDfa1_0(0x0L, 0x281440002000000L, 0x20040L);
                case 82:
                    jjmatchedKind = 47;
                    return JjMoveStringLiteralDfa1_0(0x0L, 0x14008001810000L, 0x0L);
                case 83:
                    jjmatchedKind = 29;
                    return JjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x60024000L, 0x40080L);
                case 84:
                    return JjMoveStringLiteralDfa1_0(0x0L, 0x40202080400004L, 0x4400L);
                case 85:
                    return JjStopAtPos(0, 120);
                case 86:
                    return JjStopAtPos(0, 67);
                case 87:
                    return JjStopAtPos(0, 102);
                case 88:
                    jjmatchedKind = 50;
                    return JjMoveStringLiteralDfa1_0(0x0L, 0x100000000L, 0x0L);
                case 89:
                    jjmatchedKind = 82;
                    return JjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L);
                case 90:
                    return JjMoveStringLiteralDfa1_0(0x0L, 0x80400L, 0x0L);
                case 91:
                    return JjStopAtPos(0, 39);
                case 92:
                    jjmatchedKind = 8;
                    return JjMoveStringLiteralDfa1_0(0x400L, 0x0L, 0x0L);
                case 93:
                    return JjStopAtPos(0, 42);
                case 94:
                    return JjStopAtPos(0, 36);
                case 97:
                    jjmatchedKind = 34;
                    return JjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L);
                case 99:
                    return JjStopAtPos(0, 16);
                case 104:
                    return JjStopAtPos(0, 45);
                case 110:
                    return JjStopAtPos(0, 17);
                case 111:
                    return JjStopAtPos(0, 18);
                case 112:
                    return JjStopAtPos(0, 20);
                case 114:
                    return JjStopAtPos(0, 48);
                case 115:
                    jjmatchedKind = 19;
                    return JjMoveStringLiteralDfa1_0(0x400000L, 0x0L, 0x0L);
                case 118:
                    return JjStopAtPos(0, 49);
                case 120:
                    return JjStopAtPos(0, 51);
                case 126:
                    return JjStopAtPos(0, 14);
                default:
                    return JjMoveNfa_0(0, 0);
            }
        }
        private int JjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
        {
            try { curChar = input_stream.ReadChar(); }
            catch (System.IO.IOException)
            {
                JjStopStringLiteralDfa_0(0, active0, active1, active2);
                return 1;
            }
            switch ((int)curChar)
            {
                case 63:
                    if ((active0 & 0x200L) != 0L)
                        return JjStopAtPos(1, 9);
                    else if ((active0 & 0x400L) != 0L)
                        return JjStopAtPos(1, 10);
                    break;
                case 88:
                    if ((active0 & 0x20000000000000L) != 0L)
                        return JjStopAtPos(1, 53);
                    break;
                case 97:
                    if ((active0 & 0x800000000000000L) != 0L)
                        return JjStopAtPos(1, 59);
                    else if ((active1 & 0x2L) != 0L)
                        return JjStopAtPos(1, 65);
                    else if ((active1 & 0x800L) != 0L)
                        return JjStopAtPos(1, 75);
                    else if ((active1 & 0x400000000L) != 0L)
                        return JjStopAtPos(1, 98);
                    else if ((active1 & 0x800000000L) != 0L)
                        return JjStopAtPos(1, 99);
                    else if ((active1 & 0x2000000000L) != 0L)
                        return JjStopAtPos(1, 101);
                    else if ((active1 & 0x10000000000000L) != 0L)
                        return JjStopAtPos(1, 116);
                    else if ((active1 & 0x80000000000000L) != 0L)
                        return JjStopAtPos(1, 119);
                    break;
                case 98:
                    if ((active1 & 0x10000L) != 0L)
                        return JjStopAtPos(1, 80);
                    else if ((active1 & 0x100000L) != 0L)
                        return JjStopAtPos(1, 84);
                    else if ((active1 & 0x40000000L) != 0L)
                        return JjStopAtPos(1, 94);
                    else if ((active1 & 0x400000000000L) != 0L)
                        return JjStopAtPos(1, 110);
                    else if ((active2 & 0x400L) != 0L)
                        return JjStopAtPos(1, 138);
                    else if ((active2 & 0x8000L) != 0L)
                        return JjStopAtPos(1, 143);
                    break;
                case 99:
                    if ((active1 & 0x400000L) != 0L)
                        return JjStopAtPos(1, 86);
                    else if ((active1 & 0x20000000000000L) != 0L)
                        return JjStopAtPos(1, 117);
                    else if ((active2 & 0x40000L) != 0L)
                        return JjStopAtPos(1, 146);
                    break;
                case 100:
                    if ((active1 & 0x2000000L) != 0L)
                        return JjStopAtPos(1, 89);
                    else if ((active1 & 0x8000000L) != 0L)
                        return JjStopAtPos(1, 91);
                    else if ((active2 & 0x1L) != 0L)
                        return JjStopAtPos(1, 128);
                    else if ((active2 & 0x20L) != 0L)
                        return JjStopAtPos(1, 133);
                    else if ((active2 & 0x200L) != 0L)
                        return JjStopAtPos(1, 137);
                    break;
                case 101:
                    if ((active0 & 0x400000L) != 0L)
                        return JjStopAtPos(1, 22);
                    else if ((active0 & 0x80000000000000L) != 0L)
                        return JjStopAtPos(1, 55);
                    else if ((active0 & 0x200000000000000L) != 0L)
                        return JjStopAtPos(1, 57);
                    else if ((active0 & 0x400000000000000L) != 0L)
                        return JjStopAtPos(1, 58);
                    else if ((active1 & 0x40L) != 0L)
                        return JjStopAtPos(1, 70);
                    else if ((active1 & 0x1000L) != 0L)
                        return JjStopAtPos(1, 76);
                    else if ((active1 & 0x4000L) != 0L)
                        return JjStopAtPos(1, 78);
                    else if ((active1 & 0x80000000L) != 0L)
                        return JjStopAtPos(1, 95);
                    else if ((active1 & 0x100000000L) != 0L)
                        return JjStopAtPos(1, 96);
                    else if ((active1 & 0x8000000000L) != 0L)
                        return JjStopAtPos(1, 103);
                    else if ((active2 & 0x10L) != 0L)
                        return JjStopAtPos(1, 132);
                    break;
                case 102:
                    if ((active1 & 0x1000000000L) != 0L)
                        return JjStopAtPos(1, 100);
                    else if ((active1 & 0x2000000000000000L) != 0L)
                        return JjStopAtPos(1, 125);
                    break;
                case 103:
                    if ((active0 & 0x1000000000000000L) != 0L)
                        return JjStopAtPos(1, 60);
                    else if ((active1 & 0x4000000L) != 0L)
                        return JjStopAtPos(1, 90);
                    else if ((active1 & 0x100000000000L) != 0L)
                        return JjStopAtPos(1, 108);
                    break;
                case 104:
                    if ((active1 & 0x1000000L) != 0L)
                        return JjStopAtPos(1, 88);
                    else if ((active1 & 0x40000000000000L) != 0L)
                        return JjStopAtPos(1, 118);
                    break;
                case 105:
                    if ((active0 & 0x100000000000000L) != 0L)
                        return JjStopAtPos(1, 56);
                    else if ((active0 & 0x4000000000000000L) != 0L)
                        return JjStopAtPos(1, 62);
                    else if ((active1 & 0x4L) != 0L)
                        return JjStopAtPos(1, 66);
                    else if ((active1 & 0x100L) != 0L)
                        return JjStopAtPos(1, 72);
                    else if ((active1 & 0x800000000000L) != 0L)
                        return JjStopAtPos(1, 111);
                    break;
                case 107:
                    if ((active1 & 0x1000000000000000L) != 0L)
                        return JjStopAtPos(1, 124);
                    break;
                case 108:
                    if ((active0 & 0x40000000L) != 0L)
                        return JjStopAtPos(1, 30);
                    else if ((active0 & 0x2000000000000000L) != 0L)
                        return JjStopAtPos(1, 61);
                    else if ((active1 & 0x200000000000L) != 0L)
                        return JjStopAtPos(1, 109);
                    break;
                case 109:
                    unchecked
                    {
                        if ((active1 & 0x400000000000000L) != 0L)
                            return JjStopAtPos(1, 122);
                        else if ((active1 & 0x800000000000000L) != 0L)
                            return JjStopAtPos(1, 123);
                        else if ((active1 & (long)0x8000000000000000L) != 0L)
                            return JjStopAtPos(1, 127);
                        else if ((active2 & 0x40L) != 0L)
                            return JjStopAtPos(1, 134);
                        else if ((active2 & 0x80L) != 0L)
                            return JjStopAtPos(1, 135);
                        else if ((active2 & 0x4000L) != 0L)
                            return JjStopAtPos(1, 142);
                    }
                    break;
                case 110:
                    if ((active1 & 0x20L) != 0L)
                        return JjStopAtPos(1, 69);
                    else if ((active1 & 0x400L) != 0L)
                        return JjStopAtPos(1, 74);
                    else if ((active1 & 0x10000000L) != 0L)
                        return JjStopAtPos(1, 92);
                    else if ((active1 & 0x20000000L) != 0L)
                        return JjStopAtPos(1, 93);
                    else if ((active1 & 0x4000000000000L) != 0L)
                        return JjStopAtPos(1, 114);
                    break;
                case 111:
                    if ((active1 & 0x80L) != 0L)
                        return JjStopAtPos(1, 71);
                    else if ((active1 & 0x200000L) != 0L)
                        return JjStopAtPos(1, 85);
                    else if ((active1 & 0x1000000000000L) != 0L)
                        return JjStopAtPos(1, 112);
                    else if ((active2 & 0x2L) != 0L)
                        return JjStopAtPos(1, 129);
                    else if ((active2 & 0x1000L) != 0L)
                        return JjStopAtPos(1, 140);
                    break;
                case 112:
                    if ((active2 & 0x8L) != 0L)
                        return JjStopAtPos(1, 131);
                    break;
                case 114:
                    unchecked
                    {
                        if ((active0 & 0x80000000L) != 0L)
                            return JjStopAtPos(1, 31);
                        else if ((active0 & (long)0x8000000000000000L) != 0L)
                            return JjStopAtPos(1, 63);
                        else if ((active1 & 0x10L) != 0L)
                            return JjStopAtPos(1, 68);
                        else if ((active1 & 0x8000L) != 0L)
                            return JjStopAtPos(1, 79);
                        else if ((active1 & 0x20000L) != 0L)
                            return JjStopAtPos(1, 81);
                        else if ((active1 & 0x80000L) != 0L)
                            return JjStopAtPos(1, 83);
                        else if ((active1 & 0x20000000000L) != 0L)
                            return JjStopAtPos(1, 105);
                        else if ((active1 & 0x8000000000000L) != 0L)
                            return JjStopAtPos(1, 115);
                        else if ((active2 & 0x4L) != 0L)
                            return JjStopAtPos(1, 130);
                        else if ((active2 & 0x2000L) != 0L)
                            return JjStopAtPos(1, 141);
                        else if ((active2 & 0x20000L) != 0L)
                            return JjStopAtPos(1, 145);
                    }
                    break;
                case 115:
                    if ((active0 & 0x200000L) != 0L)
                        return JjStopAtPos(1, 21);
                    else if ((active1 & 0x2000L) != 0L)
                        return JjStopAtPos(1, 77);
                    else if ((active1 & 0x200000000L) != 0L)
                        return JjStopAtPos(1, 97);
                    else if ((active1 & 0x10000000000L) != 0L)
                        return JjStopAtPos(1, 104);
                    else if ((active1 & 0x4000000000000000L) != 0L)
                        return JjStopAtPos(1, 126);
                    break;
                case 116:
                    if ((active1 & 0x40000000000L) != 0L)
                        return JjStopAtPos(1, 106);
                    else if ((active1 & 0x2000000000000L) != 0L)
                        return JjStopAtPos(1, 113);
                    break;
                case 117:
                    if ((active1 & 0x200L) != 0L)
                        return JjStopAtPos(1, 73);
                    else if ((active1 & 0x800000L) != 0L)
                        return JjStopAtPos(1, 87);
                    else if ((active1 & 0x80000000000L) != 0L)
                        return JjStopAtPos(1, 107);
                    else if ((active1 & 0x200000000000000L) != 0L)
                        return JjStopAtPos(1, 121);
                    else if ((active2 & 0x100L) != 0L)
                        return JjStopAtPos(1, 136);
                    else if ((active2 & 0x10000L) != 0L)
                        return JjStopAtPos(1, 144);
                    break;
                case 121:
                    if ((active2 & 0x800L) != 0L)
                        return JjStopAtPos(1, 139);
                    break;
                default:
                    break;
            }
            return JjStartNfa_0(0, active0, active1, active2);
        }
        private int JjMoveNfa_0(int startState, int curPos)
        {
            int startsAt = 0;
            jjnewStateCnt = 2;
            int i = 1;
            jjstateSet[0] = startState;
            int kind = 0x7fffffff;
            for (;;)
            {
                if (++jjround == 0x7fffffff)
                    ReInitRounds();
                if (curChar < 64)
                {
                    long l = 1L << curChar;
                    do
                    {
                        switch (jjstateSet[--i])
                        {
                            case 0:
                                if ((0x3ff000000000000L & l) != 0L)
                                {
                                    if (kind > 38)
                                        kind = 38;
                                }
                                else if ((0x100002600L & l) != 0L)
                                {
                                    if (kind > 1)
                                        kind = 1;
                                }
                                break;
                            case 1:
                                if ((0x3ff000000000000L & l) != 0L)
                                    kind = 38;
                                break;
                            default: break;
                        }
                    } while (i != startsAt);
                }
                else if (curChar < 128)
                {
                    long l = 1L << (curChar & 077);
                    do
                    {
                        switch (jjstateSet[--i])
                        {
                            default: break;
                        }
                    } while (i != startsAt);
                }
                else
                {
                    int i2 = (curChar & 0xff) >> 6;
                    long l2 = 1L << (curChar & 077);
                    do
                    {
                        switch (jjstateSet[--i])
                        {
                            default: break;
                        }
                    } while (i != startsAt);
                }
                if (kind != 0x7fffffff)
                {
                    jjmatchedKind = kind;
                    jjmatchedPos = curPos;
                    kind = 0x7fffffff;
                }
                ++curPos;
                if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
                    return curPos;
                try { curChar = input_stream.ReadChar(); }
                catch (System.IO.IOException) { return curPos; }
            }
        }
        static readonly int[] jjnextStates = System.Array.Empty<int>();

        /// <summary>Token literal values.</summary>
        public static readonly string[] jjstrLiteralImages = new string[] 
        {
            "", null, ";", "&", ",", "!", "-", "/", "\\", "/?",
            "\\?", "=", "#", ":", "~", "@", "c", "n", "o", "s", "p",
            "as", "se", "B", "C", "N", "O", "F", "P", "S",
            "Cl", "Br", "I", "*", "a", "A", "^", "?", null, "[", "(",
            ")", "]", "$", "+", "h", "D", "R", "r", "v", "X", "x",
            "G", "#X", "H", "He", "Li", "Be", "Ne", "Na",
            "Mg", "Al", "Si", "Ar", "K", "Ca", "Ti", "V",
            "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn",
            "Ga", "Ge", "As", "Se", "Kr", "Rb", "Sr",
            "Y", "Zr", "Nb", "Mo", "Tc", "Ru", "Rh",
            "Pd", "Ag", "Cd", "In", "Sn", "Sb", "Te",
            "Xe", "Cs", "Ba", "La", "Hf", "Ta", "W",
            "Re", "Os", "Ir", "Pt", "Au", "Hg", "Tl",
            "Pb", "Bi", "Po", "At", "Rn", "Fr", "Ra",
            "Ac", "Th", "Pa", "U", "Pu", "Am", "Cm",
            "Bk", "Cf", "Es", "Fm", "Md", "No", "Lr",
            "Np", "Ce", "Nd", "Pm", "Sm", "Eu", "Gd",
            "Tb", "Dy", "Ho", "Er", "Tm", "Yb", "Lu",
            "Pr", "Sc", ">", ".", "%", "--", "---", "----",
            "-----", "------", "-------", "--------",
             "++", "+++", "++++", "+++++", "++++++",
            "+++++++", "++++++++",
        };

        /// <summary>Lexer state names.</summary>
        public static readonly string[] lexStateNames = new string[]
        {
            "ATOM_EXPRESSION",
            "Default",
        };

        /// <summary>Lex State array.</summary>
        public static readonly int[] jjnewLexState = new int[]
        {
           -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
           -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
           -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
           -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
           -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
           -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
           -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        };
        protected SimpleCharStream input_stream;
        private readonly int[] jjrounds = new int[2];
        private readonly int[] jjstateSet = new int[4];
        protected char curChar;
        /// <summary>Constructor.</summary>
        public SMARTSParserTokenManager(SimpleCharStream stream)
        {
            if (SimpleCharStream.staticFlag)
                throw new System.Exception("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
            input_stream = stream;
        }

        /// <summary>Constructor.</summary>
        public SMARTSParserTokenManager(SimpleCharStream stream, int lexState)
          : this(stream)
        {
            SwitchTo(lexState);
        }

        /// <summary>Reinitialise parser.</summary>
        public void ReInit(SimpleCharStream stream)
        {
            jjmatchedPos = jjnewStateCnt = 0;
            curLexState = defaultLexState;
            input_stream = stream;
            ReInitRounds();
        }
        private void ReInitRounds()
        {
            unchecked
            {
                int i;
                jjround = (int)0x80000001;
                for (i = 2; i-- > 0;)
                    jjrounds[i] = (int)0x80000000;
            }
        }

        /// <summary>Reinitialise parser.</summary>
        public void ReInit(SimpleCharStream stream, int lexState)
        {
            ReInit(stream);
            SwitchTo(lexState);
        }

        /// <summary>Switch to specified lex state.</summary>
        public void SwitchTo(int lexState)
        {
            if (lexState >= 2 || lexState < 0)
                throw new TokenManagerException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenManagerException.ErrorCodes.InvalidLexicalState);
            else
                curLexState = lexState;
        }

        protected Token JjFillToken()
        {
            Token t;
            string curTokenImage;
            int beginLine;
            int endLine;
            int beginColumn;
            int endColumn;
            string im = jjstrLiteralImages[jjmatchedKind];
            curTokenImage = im ?? input_stream.GetImage();
            beginLine = input_stream.GetBeginLine();
            beginColumn = input_stream.GetBeginColumn();
            endLine = input_stream.GetEndLine();
            endColumn = input_stream.GetEndColumn();
            t = Token.NewToken(jjmatchedKind, curTokenImage);

            t.beginLine = beginLine;
            t.endLine = endLine;
            t.beginColumn = beginColumn;
            t.endColumn = endColumn;

            return t;
        }

        int curLexState = 1;
        const int defaultLexState = 1;
        int jjnewStateCnt;
        int jjround;
        int jjmatchedPos;
        int jjmatchedKind;

        /// <summary>Get the next Token.</summary>
        public Token GetNextToken()
        {
            Token matchedToken;
            int curPos = 0;

            for (;;)
            {
                try
                {
                    curChar = input_stream.BeginToken();
                }
                catch (System.IO.IOException)
                {
                    jjmatchedKind = 0;
                    matchedToken = JjFillToken();
                    return matchedToken;
                }

                switch (curLexState)
                {
                    case 0:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = JjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = JjMoveStringLiteralDfa0_1();
                        break;
                }
                if (jjmatchedKind != 0x7fffffff)
                {
                    if (jjmatchedPos + 1 < curPos)
                        input_stream.Backup(curPos - jjmatchedPos - 1);
                    matchedToken = JjFillToken();
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    return matchedToken;
                }
                int error_line = input_stream.GetEndLine();
                int error_column = input_stream.GetEndColumn();
                string error_after = null;
                bool EOFSeen = false;
                try { input_stream.ReadChar(); input_stream.Backup(1); }
                catch (System.IO.IOException)
                {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r')
                    {
                        error_line++;
                        error_column = 0;
                    }
                    else
                        error_column++;
                }
                if (!EOFSeen)
                {
                    input_stream.Backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenManagerException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenManagerException.ErrorCodes.LexicalError);
            }
        }

        private void JjCheckNAdd(int state)
        {
            if (jjrounds[state] != jjround)
            {
                jjstateSet[jjnewStateCnt++] = state;
                jjrounds[state] = jjround;
            }
        }
        private void JjAddStates(int start, int end)
        {
            do
            {
                jjstateSet[jjnewStateCnt++] = jjnextStates[start];
            } while (start++ != end);
        }
        private void JjCheckNAddTwoStates(int state1, int state2)
        {
            JjCheckNAdd(state1);
            JjCheckNAdd(state2);
        }
    }
}
