/* Generated By:JJTree: Do not edit this line. ASTLowAndExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
namespace NCDK.Smiles.SMARTS.Parser
{
    [System.Obsolete]
    internal class ASTLowAndExpression : SimpleNode
    {
        private int mapIdx = 0;

        public ASTLowAndExpression(int id)
          : base(id)
        {
        }

        public ASTLowAndExpression(SMARTSParser p, int id)
          : base(p, id)
        {
        }
        
        public int GetMapIdx()
        {
            return mapIdx;
        }

        public void SetMapIdx(int mapIdx)
        {
            this.mapIdx = mapIdx;
        }

        /// <summary>Accept the visitor. </summary>
        public override object JjtAccept(ISMARTSParserVisitor visitor, object data)
        {
            return visitor.Visit(this, data);
        }

        public void InsertLeafChild(INode node)
        {
            INode firstNode = this.JjtGetChild(0);
            while (!(firstNode is ASTImplicitHighAndExpression)) {
                firstNode = firstNode.JjtGetChild(0);
            }
            ASTImplicitHighAndExpression insert = new ASTImplicitHighAndExpression(
                    SMARTSParserTreeConstants.JJTIMPLICITHIGHANDEXPRESSION);
            insert.JjtAddChild(node, 0);
            insert.JjtAddChild(firstNode.JjtGetChild(0), 1);
            firstNode.JjtRemoveChild(0);
            firstNode.JjtAddChild(insert, 0);
        }
    }
}
